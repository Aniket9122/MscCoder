#include <iostream>
#include <vector>
#include <string>
using namespace std;

string match_parens(vector<string> lst) {
    // Check if the input vector is empty
    if (lst.empty()) return "No";

    // Initialize a stack to keep track of opening parentheses
    stack<char> openParens;

    // Loop through each string in the vector
    for (string& str : lst) {
        // Loop through each character in the string
        for (char c : str) {
            // If the character is an opening parenthesis, push it to the stack
            if (c == '(') openParens.push(c);
            // If the character is a closing parenthesis, pop from the stack
            else if (!openParens.empty() && openParens.top() == '(') {
                openParens.pop();
            }
        }
    }

    // Check if there are any opening parentheses left in the stack
    return (openParens.empty()) ? "Yes" : "No";
}

#include <chrono>
#include <iostream>
#undef NDEBUG
#include<assert.h>
int main(){
    using clock = std::chrono::steady_clock;
    auto __start = clock::now();
    long long time_taken_ms = 0;
    int tests_passed = 0;
    int total_tests = 0;

    if((match_parens({"()(", ")"}) == "Yes")){ tests_passed++; } total_tests++;

    if((match_parens({")", ")){ tests_passed++; } total_tests++;
"}) == "No");
    if((match_parens({"(()(())", "())())"})){ tests_passed++; } total_tests++;
== "No");
    if((match_parens({")())){ tests_passed++; } total_tests++;
", "(()()("}) == "Yes");
    if((match_parens({"(())))){ tests_passed++; } total_tests++;
", "(()())(("}) == "Yes");
    if((match_parens({"()", "())"})){ tests_passed++; } total_tests++;
== "No");
    if((match_parens({"(()(", "()))()"}) == "Yes")){ tests_passed++; } total_tests++;

    if((match_parens({"((((", "((())"}) == "No");
    assert (match_parens({")(()", "(()("}) == "No");
    assert (match_parens({")(", ")("}) == "No");
    assert (match_parens({"(", ")"}) == "Yes");
    assert (match_parens({")", "("}) == "Yes" );
    assert (match_parens({"()(",")"}) == "Yes");
    assert (match_parens({")",")"}) == "No");
    assert (match_parens({"(()(())","())())"}) == "No");
    assert (match_parens({")())","(()()("}) == "Yes");
    assert (match_parens({"(())))","(()())(("}) == "Yes");
    assert (match_parens({"()","())"}) == "No");
    assert (match_parens({"(()(","()))()"}) == "Yes");
    assert (match_parens({"((((","((())"}) == "No");
    assert (match_parens({")(()","(()("}) == "No");
    assert (match_parens({")(",")("}) == "No");
    assert (match_parens({"(",")"}) == "Yes");
    assert (match_parens({")","("}) == "Yes");
    assert (match_parens({"(","("}) == "No");
    assert (match_parens({"))","))"}) == "No");
    assert (match_parens({"(","()())("}) == "No");
    assert (match_parens({"()()","()()()"}) == "Yes");
    assert (match_parens({"(())",")()("}) == "No");
    assert (match_parens({"()()","))"}) == "No");
    assert (match_parens({"((","))"}) == "Yes");
    assert (match_parens({"(((",")))"}) == "Yes");
    assert (match_parens({"()",")()("}) == "No");
    assert (match_parens({"())(","()"}) == "No");
    assert (match_parens({"(","(("}) == "No");
    assert (match_parens({"()()()()","))"}) == "No");
    assert (match_parens({"()()()(","))"}) == "No");
    assert (match_parens({"()()()(()())","))"}) == "No");
    assert (match_parens({"","("}) == "No");
    assert (match_parens({"()()(()()()()()","))"}) == "No");
    assert (match_parens({"()()()(",")()()()(()()))"}) == "No");
    assert (match_parens({")()()()(",")()()()(()()))"}) == "No");
    assert (match_parens({")()(",")()("}) == "No");
    assert (match_parens({")()(",")())()()()("}) == "No");
    assert (match_parens({")()()()(()()))","("}) == "No")){ tests_passed++; } total_tests++;

    if((match_parens({"()(()()()(()()))()(()())","))){ tests_passed++; } total_tests++;
"}) == "No");
    if((match_parens({"((","("}) == "No");
    assert (match_parens({"()(()()()(()()))()(()())","()(()(()()(()()))()(()())"}) == "No");
    assert (match_parens({"())(","(("}) == "No");
    assert (match_parens({"()()","()()()()()()()"}) == "Yes");
    assert (match_parens({"())))(","(("}) == "No");
    assert (match_parens({"","(("}) == "No");
    assert (match_parens({"(((","("}) == "No");
    assert (match_parens({"()(()()()()))()(()())","))"}) == "No");
    assert (match_parens({"())(","())"}) == "No");
    assert (match_parens({"()()","()()"}) == "Yes");
    assert (match_parens({"((","(("}) == "No");
    assert (match_parens({")()(",")()))()()()("}) == "No");
    assert (match_parens({"(())(","()"}) == "No");
    assert (match_parens({"()()()(","))())"}) == "No");
    assert (match_parens({"))())","(("}) == "No");
    assert (match_parens({"",""}) == "Yes");
    assert (match_parens({"(","()("}) == "No");
    assert (match_parens({"()())((((",")))"}) == "No");
    assert (match_parens({"((",")()("}) == "No");
    assert (match_parens({"()(()()()(()()))()(()())","()(()(()()(()()())(()())"}) == "No");
    assert (match_parens({"((","()())("}) == "No");
    assert (match_parens({"(())(((","))"}) == "No");
    assert (match_parens({"(((",")"}) == "No");
    assert (match_parens({"()()()()()()()",""}) == "Yes");
    assert (match_parens({"()()((",")()("}) == "No");
    assert (match_parens({"((",")()))()()()("}) == "No");
    assert (match_parens({"((",""}) == "No");
    assert (match_parens({"(())",")))()))("}) == "No");
    assert (match_parens({"()()(())())","))())"}) == "No");
    assert (match_parens({"()()()()()()()()()()()","()()()()()()()"}) == "Yes");
    assert (match_parens({"())))(",")()()()(()()))"}) == "No");
    assert (match_parens({")()()()(()()))","(("}) == "Yes");
    assert (match_parens({"()())(())(","(("}) == "No");
    assert (match_parens({"()()()(()())",")()()()())"}) == "No");
    assert (match_parens({"((","()()()()(()()))("}) == "No");
    assert (match_parens({"())(","())("}) == "No");
    assert (match_parens({"((((","("}) == "No");
    assert (match_parens({"(())","()())()))()()(("}) == "No");
    assert (match_parens({"()())((((","))))"}) == "No");
    assert (match_parens({"","()()(()()()()()"}) == "No");
    assert (match_parens({"()()()((","))())"}) == "No");
    assert (match_parens({"()())(())(",")()()()(()()))"}) == "No");
    assert (match_parens({")()()()(()()))","())))("}) == "No");
    assert (match_parens({"","()"}) == "Yes");
    assert (match_parens({")()))()))))()()(",")()))()()()("}) == "No");
    assert (match_parens({")()(",")()()()(()()))"}) == "No")){ tests_passed++; } total_tests++;

    if((match_parens({"()(()()()()))()(()())",")){ tests_passed++; } total_tests++;
()()()())"}) == "No");
    if((match_parens({"())(",")()"})){ tests_passed++; } total_tests++;
== "No");
    if((match_parens({"((","()()("}) == "No");
    assert (match_parens({")()))()))){ tests_passed++; } total_tests++;
))()()(",")()))()(()((())("}) == "No");
    if((match_parens({"(())(","()())(())((()"}) == "No");
    assert (match_parens({"(()(","()"}) == "No");
    assert (match_parens({"(())(((","()()()()()()()()()()()"}) == "No");
    assert (match_parens({"()()()()()()()","))))"}) == "No");
    assert (match_parens({"()()()((","))("}) == "No");
    assert (match_parens({"","())"}) == "No");
    assert (match_parens({")())()()()(","()"}) == "No");
    assert (match_parens({"()","()"}) == "Yes");
    assert (match_parens({"((","()()()()()()()()()("}) == "No");
    assert (match_parens({"((((",")()))()))))()()("}) == "No");
    assert (match_parens({"(())(","()()()()()()()()())(())((()"}) == "No");
    assert (match_parens({"((","()())()))()()(("}) == "No");
    assert (match_parens({"()())(()))(",")()()()(()()))"}) == "No");
    assert (match_parens({"()(((","()()(("}) == "No");
    assert (match_parens({")()(",")()))()()(()("}) == "No");
    assert (match_parens({")()))()()(()((((","("}) == "No");
    assert (match_parens({"())()()()()(","()"}) == "No");
    assert (match_parens({"()()()(",")()))()()(()(((("}) == "No");
    assert (match_parens({"()()()))))((","))("}) == "No");
    assert (match_parens({"()(()()()()))()(()())","(("}) == "No");
    assert (match_parens({"()()((","()()("}) == "No");
    assert (match_parens({"(())","((("}) == "No");
    assert (match_parens({"(()(()()(()()())",")))()))("}) == "No");
    assert (match_parens({"()(()()()(()()))()(()())","(((("}) == "No");
    assert (match_parens({"(((","()()("}) == "No");
    assert (match_parens({"()()()()(()()))(","(()))((("}) == "No");
    assert (match_parens({"())))(","("}) == "No");
    assert (match_parens({"(","()(()))()"}) == "Yes");
    assert (match_parens({"(((((((","((((())))))))"}) == "No");
    assert (match_parens({"()(((","))))"}) == "No");
    assert (match_parens({")(()()","((((((())))"}) == "No");
    assert (match_parens({"())()()(",")))))("}) == "No");
    assert (match_parens({"(((())))","()"}) == "Yes");
    assert (match_parens({")()()(","(()))"}) == "No");
    assert (match_parens({")))))","((((("}) == "Yes");
    assert (match_parens({"((",")))))((("}) == "No");
    assert (match_parens({"(()(","))))"}) == "No");
    assert (match_parens({"())()()(",")))(()()))("}) == "No");
    assert (match_parens({"(((())))","(((())))"}) == "Yes");
    assert (match_parens({"())()()(",")))))((("}) == "No");
    assert (match_parens({")()())(","(()))"}) == "No");
    assert (match_parens({"(((())))","(()))"}) == "No");
    assert (match_parens({"())()())))))(",")))(()()))("}) == "No");
    assert (match_parens({"((((())))))))","))))"}) == "No")){ tests_passed++; } total_tests++;

    if((match_parens({"()(((",")))))){ tests_passed++; } total_tests++;
"}) == "No");
    if((match_parens({"((((()))))))){ tests_passed++; } total_tests++;
)","((((()))))((((()))))))))))"}) == "No");
    if((match_parens({"(",")))){ tests_passed++; } total_tests++;
))((("}) == "No");
    if((match_parens({"((()(","))))"})){ tests_passed++; } total_tests++;
== "No");
    if((match_parens({"((((()))))))){ tests_passed++; } total_tests++;
)","((((()))))(())"}) == "No");
    if((match_parens({"(",")))){ tests_passed++; } total_tests++;
))"}) == "No");
    if((match_parens({"((((()))))))){ tests_passed++; } total_tests++;
)","((((()))))((((())))))))))))))((())"}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
)(()()))(",")))(()()))("}) == "No");
    if((match_parens({"((((((())))","))))"})){ tests_passed++; } total_tests++;
== "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
)(",")))(()())))("}) == "No");
    if((match_parens({"((()((","))))"}) == "Yes")){ tests_passed++; } total_tests++;

    if((match_parens({"((((()))))))){ tests_passed++; } total_tests++;
)","((((()))))((((()))))))))))))))((())"}) == "No");
    if((match_parens({"(((())))))){ tests_passed++; } total_tests++;
))((()","(((())))"}) == "No");
    if((match_parens({"((((((())())","))))"}) == "Yes")){ tests_passed++; } total_tests++;

    if((match_parens({"))){ tests_passed++; } total_tests++;
)))(((","())()()("}) == "No");
    if((match_parens({"()(((","((((()))))(())"}) == "No");
    assert (match_parens({"((((())))))))","((((()))))(()))(()()))){ tests_passed++; } total_tests++;
)()))))))))))((())"}) == "No");
    if((match_parens({"(()(",")))(()()))){ tests_passed++; } total_tests++;
("}) == "No");
    if((match_parens({"(((((","()"}) == "No");
    assert (match_parens({")()()(","("}) == "No");
    assert (match_parens({"()(((","((((())))))))))(())"}) == "No");
    assert (match_parens({"((((()((((((()))))))","))))"}) == "Yes");
    assert (match_parens({"((((()(()))))))",")))))){ tests_passed++; } total_tests++;
"}) == "No");
    if((match_parens({")()(((","((((()))))(())"}) == "No");
    assert (match_parens({"((((((((()))))(()))(()())))())))))){ tests_passed++; } total_tests++;
)))))((())()((((((()))))))","))))"}) == "No");
    if((match_parens({"(((()()))","(((())))"}) == "No");
    assert (match_parens({"((((()))))(((((()))))))))){ tests_passed++; } total_tests++;
)))))((())","((((()))))((((())))))))))))))((())"}) == "No");
    if((match_parens({"((((()))))(((((())))))))){ tests_passed++; } total_tests++;
))))))((())","()(()))()"}) == "No");
    if((match_parens({"()","(((())))"}) == "Yes")){ tests_passed++; } total_tests++;

    if((match_parens({"((((((((()))))(()))(()())))())))){ tests_passed++; } total_tests++;
)))))))((())()((((((()))))))",")))(()())))("}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
)))(((","))))"}) == "No");
    if((match_parens({"(()()()()(","(()))"}) == "No");
    assert (match_parens({")))){ tests_passed++; } total_tests++;
(()()))(((((()))))(((((())))))))))))))((())",")))(()())))("}) == "No");
    if((match_parens({"(())))){ tests_passed++; } total_tests++;
)(","))))"}) == "No");
    if((match_parens({")((((()((((((()))))))))))","((((("}) == "No");
    assert (match_parens({"())()()(","())()()("}) == "No");
    assert (match_parens({"(","()((((()((()"}) == "No");
    assert (match_parens({"((((()))))","((((()))))((((()))))))))))))))((())"}) == "No");
    assert (match_parens({"(((((((","("}) == "No");
    assert (match_parens({"())()()(","(()("}) == "No");
    assert (match_parens({"()((()))(","((((()))))(())"}) == "No");
    assert (match_parens({"())()())))))(","()()))("}) == "No");
    assert (match_parens({")()(","(()))"}) == "No");
    assert (match_parens({"(()(","))))()((("}) == "No");
    assert (match_parens({"()((()))(())()()(","(()("}) == "No");
    assert (match_parens({"(((((((","(("}) == "No");
    assert (match_parens({"(()(","(("}) == "No");
    assert (match_parens({"()(((","()((("}) == "No");
    assert (match_parens({"((","()((((()((()"}) == "No");
    assert (match_parens({")))))","((()(()()(("}) == "Yes");
    assert (match_parens({"((((((()()))((((((()((((((()))))))(())))","((((((()()))(((())))"}) == "No");
    assert (match_parens({"())()()))))","()()))("}) == "No");
    assert (match_parens({"()((()))(","((((((("}) == "No");
    assert (match_parens({")))(((())))()))(",")))(()()))("}) == "No");
    assert (match_parens({"(((((((","((((()))))(())"}) == "No");
    assert (match_parens({")()(","()"}) == "No");
    assert (match_parens({")(()()",")))))((("}) == "No");
    assert (match_parens({"(()(",")))))"}) == "No");
    assert (match_parens({"((()((()))()()()()(","(()))"}) == "No");
    assert (match_parens({")))))",")))))"}) == "No");
    assert (match_parens({")()(((",")))(()()))("}) == "No");
    assert (match_parens({"(()((",")))(()()))("}) == "No");
    assert (match_parens({"((((((())))",")))))"}) == "No");
    assert (match_parens({"())()()))))","((((())))))))"}) == "No");
    assert (match_parens({"())()()))(()()))()(",")))))((("}) == "No");
    assert (match_parens({"))))","((((()))))((((()))))))))))))))((())"}) == "No");
    assert (match_parens({")))))","()((()))("}) == "No");
    assert (match_parens({"(()((",")()())("}) == "No");
    assert (match_parens({"(()(","(()))"}) == "No");
    assert (match_parens({")(()()",")(()()"}) == "No");
    assert (match_parens({")))))((",")))))((("}) == "No");
    assert (match_parens({")()())(","()((()))(())()()("}) == "No");
    assert (match_parens({")))(()())))){ tests_passed++; } total_tests++;
(","))))"}) == "No");
    if((match_parens({"((((()))))((((()))))))){ tests_passed++; } total_tests++;
)))))))((())","(()))"}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
)))","))))"}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
)))((","(()))))("}) == "No");
    if((match_parens({"((((()))))))){ tests_passed++; } total_tests++;
)",""}) == "No");
    if((match_parens({"())()())){ tests_passed++; } total_tests++;
))()())())","((((())))))))"}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
))","((((()))))(())"}) == "No");
    if((match_parens({"(((((","((((()))))(())"}) == "No");
    assert (match_parens({"((()((()))()()()()(","()((((()((()"}) == "No");
    assert (match_parens({")()(","(())))"}) == "No");
    assert (match_parens({"((()((",")))(()()))("}) == "No");
    assert (match_parens({"()(((","()((((((())))))))))(())("}) == "No");
    assert (match_parens({"()((()))(","(((((((()))))(((((())))))))))))))((())(((("}) == "No");
    assert (match_parens({"()(()))()","))))"}) == "No");
    assert (match_parens({")))))","((((()((((((()))))))"}) == "No");
    assert (match_parens({"((((()))))(())","((((()))))(())"}) == "Yes");
    assert (match_parens({"()))))()(((","()((("}) == "No");
    assert (match_parens({"()(((",")()((("}) == "No");
    assert (match_parens({"())(()()(","(()("}) == "No");
    assert (match_parens({")))))","))(()))))))"}) == "No");
    assert (match_parens({"((((()))))","(()))"}) == "No");
    assert (match_parens({")()(","((()("}) == "No");
    assert (match_parens({"()((()))(","((((()()))(((((("}) == "No");
    assert (match_parens({"()()))(","()"}) == "No");
    assert (match_parens({"(()(","((("}) == "No");
    assert (match_parens({")))))((","()()))("}) == "No");
    assert (match_parens({"()))(((())))()))((()(()()((","((()(()()(("}) == "No");
    assert (match_parens({"(()(((((()((((((()))))))","(()("}) == "No");
    assert (match_parens({"))(()))))))","))(()))))))"}) == "No");
    assert (match_parens({"()))()())))))(","())()())))))("}) == "No");
    assert (match_parens({"()((((","()((((((())))))))))(())("}) == "No");
    assert (match_parens({"((((((","()"}) == "No");
    assert (match_parens({"()))()())))))(","()((("}) == "No");
    assert (match_parens({")))))","()((("}) == "No");
    assert (match_parens({"((((()))))))))))(())","())()())))))){ tests_passed++; } total_tests++;
("}) == "No");
    if((match_parens({"())()())){ tests_passed++; } total_tests++;
)))","))))"}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
)(","(()(("}) == "No");
    if((match_parens({"(((((((())))",")))))"})){ tests_passed++; } total_tests++;
== "No");
    if((match_parens({"((((()((((((()))))))","))()))))){ tests_passed++; } total_tests++;
)()((()"}) == "No");
    if((match_parens({"(((((",")()"}) == "No");
    assert (match_parens({")))))(((","())()()))(()()))){ tests_passed++; } total_tests++;
()("}) == "No");
    if((match_parens({"())()())){ tests_passed++; } total_tests++;
)))","((((()))))((((()))))))))))))))((())"}) == "No");
    if((match_parens({"()(((","(())))"}) == "No");
    assert (match_parens({")()(","((())("}) == "No");
    assert (match_parens({"()))))()(((",")))(()()))){ tests_passed++; } total_tests++;
("}) == "No");
    if((match_parens({"())()())){ tests_passed++; } total_tests++;
))(((()())))","))))"}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
)))((","))))))((("}) == "No");
    if((match_parens({"()(((",")((((()))"}) == "No");
    assert (match_parens({")()()(",")))(()()))("}) == "No");
    assert (match_parens({")))){ tests_passed++; } total_tests++;
)","())()())))))("}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
))","())()()))))"}) == "No");
    if((match_parens({"((((((()()))((((((()((((((()))))))(())))","((((((()())(((((((()))))(((())))"}) == "No");
    assert (match_parens({"((((((((()))))(()))(()())))()))))))))))((())()((((((()))))))","((((((((()))))(()))(()())))()))))))))))((())()((((((()))))))"}) == "No")){ tests_passed++; } total_tests++;

    if((match_parens({")()()(",")()()("}) == "No")){ tests_passed++; } total_tests++;

    if((match_parens({"))){ tests_passed++; } total_tests++;
)(()())))(","()(()))()"}) == "No");
    if((match_parens({"((()((",")))))((("}) == "No");
    assert (match_parens({"))))){ tests_passed++; } total_tests++;
",")))))"}) == "No");
    if((match_parens({"((((()((((((()))))))",")))))"})){ tests_passed++; } total_tests++;
== "No");
    if((match_parens({"())()())){ tests_passed++; } total_tests++;
)))","((((()))))((((()))))))))))))))((()())()()))(()()))()("}) == "No");
    if((match_parens({"((((((())())",")))))("}) == "No")){ tests_passed++; } total_tests++;

    if((match_parens({"()))){ tests_passed++; } total_tests++;
))()(((","))()((((()((())))"}) == "No");
    if((match_parens({"(((((((","((((((("}) == "No");
    assert (match_parens({"()()))(","()()))("}) == "No");
    assert (match_parens({"())()()(","((((()))))((((()))))))))))))))((())"}) == "No");
    assert (match_parens({"(((((((","((((()))))(()))))((())"}) == "No");
    assert (match_parens({"()(((","((()("}) == "No");
    assert (match_parens({"((((()))))(((((())))))))))))))((())","((()((()))()()()()("}) == "No");
    assert (match_parens({")()()","((((((())))"}) == "No");
    assert (match_parens({"()(((",")((((()"}) == "No");
    assert (match_parens({"()((()))(","((((()())()(((((("}) == "No");
    assert (match_parens({"((((())))))))","((((()))))(()))(()())))())))))))()(()))())))((())"}) == "No");
    assert (match_parens({"()))))()(((",")))(((())))()))("}) == "No");
    assert (match_parens({"()))()())))))(","(()((((((())))))))))(())()((("}) == "No");
    assert (match_parens({"((((()))))(())","(()((()))))(())"}) == "No");
    assert (match_parens({")))){ tests_passed++; } total_tests++;
(((((()))))())(",")))(()()))("}) == "No");
    if((match_parens({"((((((()()))((((((()((((((()))))))(())))","((((((()())(((((((())))((((()))))))))))(())((())))"}) == "No");
    assert (match_parens({"()))()())))))(","()))(((((()))))())(((("}) == "No");
    assert (match_parens({"())()()))(()()))()(","((((((()())(((((((()))))(((())))"}) == "No");
    assert (match_parens({"(((((()))))((((()))))))))))))))((())","(((((()))))((((()))))))))))){ tests_passed++; } total_tests++;
))))((())"}) == "No");
    if((match_parens({"()(()))()","(()))){ tests_passed++; } total_tests++;
))"}) == "No");
    if((match_parens({"()((()))(","(((((((((((((())))"}) == "No");
    assert (match_parens({"()(((())))))))","((((())))))))"}) == "No");
    assert (match_parens({")))))(((","))))){ tests_passed++; } total_tests++;
)((("}) == "No");
    if((match_parens({"()))){ tests_passed++; } total_tests++;
()())))))(","()))()())))))("}) == "No");
    if((match_parens({"((()(()(((()()((","((()(()()(("}) == "No");
    assert (match_parens({"((((()))))(()))(()())))())))))))()(()))())))((())()))){ tests_passed++; } total_tests++;
()())))))(","()((("}) == "No");
    if((match_parens({"()((()))(","((((())))"}) == "No");
    assert (match_parens({")()(((","((((((((((()))))(((((())))))))))))))((())(((((()))))(())"}) == "No");
    assert (match_parens({"()(((((()))))((((())))))))))))){ tests_passed++; } total_tests++;
))((())((",")()((("}) == "No");
    if((match_parens({")((((()",")((((()"}) == "No");
    assert (match_parens({")()(","()((((()))))((((()))))))))))"}) == "No")){ tests_passed++; } total_tests++;

    if((match_parens({"((((((","((((("}) == "No");
    assert (match_parens({"))))","(()("}) == "No");
    assert (match_parens({"())()()(","((((()((((((()))))))"}) == "No");
    assert (match_parens({"((((((((()))))(()))(()())))()))))))))))((())()((((((()))))))",")))(()())))(((((((("}) == "No");
    assert (match_parens({")))(()())))(",")))((()((()))()()()()()"}) == "No");
    assert (match_parens({"))(()))))){ tests_passed++; } total_tests++;
((((()))))(()))(()())))())))))))()(()))())))((())()))()())))))())","))(()))))))"}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
)(()()))))((((((((",")))(()()))("}) == "No");
    if((match_parens({"((((((((()))))(()))(()())))())))){ tests_passed++; } total_tests++;
)))))))((())()((((((()))))))","((((((((()))))(())(((()))))))"}) == "No");
    if((match_parens({"((()(","(()))"}) == "No");
    assert (match_parens({"())()())()))){ tests_passed++; } total_tests++;
)(",")))(()()))("}) == "No");
    if((match_parens({"()))){ tests_passed++; } total_tests++;
(((())))()))((()(()()((",")))))"}) == "No");
    if((match_parens({"((((((((()))))(()))(()())))())))){ tests_passed++; } total_tests++;
)))))))((())()((((((()))))))",")))(()())))((((((((("}) == "No");
    if((match_parens({"((","((("}) == "No");
    assert (match_parens({"(()))))(","))(((((((())))"}) == "No");
    assert (match_parens({"(()(((((()(((((((()))))))","(()("}) == "No");
    assert (match_parens({")))(()()))((((())((())",")))(()())))("}) == "No");
    assert (match_parens({"))()(","(()))"}) == "No");
    assert (match_parens({")))))","(()("}) == "No");
    assert (match_parens({")()())()())))(((()())))(((","((((()))))(())"}) == "No");
    assert (match_parens({"((((()()))((((((","()(()))()"}) == "No");
    assert (match_parens({"((((())))))))","((((())))))))"}) == "No");
    assert (match_parens({"()(((","((((())))))))))((()(((((()((((((()))))))())"}) == "No");
    assert (match_parens({"((((((())))",")))(()())))("}) == "No");
    assert (match_parens({"()()))","()()))("}) == "No");
    assert (match_parens({"((((((())))","))"}) == "No");
    assert (match_parens({"((((((()())(((((((())))((((()))))))))))(())((())))","((((()))))((((())))))))))))))){ tests_passed++; } total_tests++;
)((())"}) == "No");
    if((match_parens({"())()()(","((((()(((((((()))))))"}) == "No");
    assert (match_parens({"))))","((()(("}) == "Yes");
    assert (match_parens({")))()))))){ tests_passed++; } total_tests++;
)()((()((((()",")((((()"}) == "No");
    if((match_parens({"((((()()))((((((","((((()))))((((())))))))))))))((())"}) == "No")){ tests_passed++; } total_tests++;

    if((match_parens({"(()((((((())))))))))){ tests_passed++; } total_tests++;
(())()(((","())()()("}) == "No");
    if((match_parens({"(())))){ tests_passed++; } total_tests++;
","(())))"}) == "No");
    if((match_parens({")()()(","))){ tests_passed++; } total_tests++;
)))"}) == "No");
    if((match_parens({"()))){ tests_passed++; } total_tests++;
)()())))))(","()))()())))))("}) == "No");
    if((match_parens({"((((((((()))()))))))","))){ tests_passed++; } total_tests++;
)(()())))(((((((("}) == "No");
    if((match_parens({"()))){ tests_passed++; } total_tests++;
()(",")))))((("}) == "No");
    if((match_parens({")()((((","((((()))))(())"}) == "No");
    assert (match_parens({"()((())))))))){ tests_passed++; } total_tests++;
((","(((((((()))))((((((())))))))))))))((())(((("}) == "No");
    if((match_parens({"())()())){ tests_passed++; } total_tests++;
)))","))()((((()((())))"}) == "No");
    if((match_parens({"()))){ tests_passed++; } total_tests++;
()(",")((((()"}) == "No");
    if((match_parens({"()(((((())))","((((()(((((((()))))))((((((())))"}) == "No");
    assert (match_parens({")()()(",")()((("}) == "No");
    assert (match_parens({"())()())))(((()())))","())()())))(((()())))"}) == "No");
    assert (match_parens({"())()()))))",")){ tests_passed++; } total_tests++;
((((()))))(((((()())))))("}) == "No");
    if((match_parens({"((((((((()))))(()))(()())))())))){ tests_passed++; } total_tests++;
)))))))((())()((((((((()()))(((())))((((()))))))","(()((((((())))))))))(())()((("}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
(()))))((((()))))(()))(()())))())))))))()(()))())))((()))()))()())))))())","))(())))))()"}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
)(()()))))(((((((()(()()","((((((())))"}) == "No");
    if((match_parens({"()((((((()))))))))){ tests_passed++; } total_tests++;
)(())(","((((()()))(((((("}) == "No");
    if((match_parens({"(())))){ tests_passed++; } total_tests++;
)(","))(()))))((((()))))(()))(()())))())))))))()(()))())))((()))()))()())))))())"}) == "No");
    if((match_parens({")(()()","((((()))))))){ tests_passed++; } total_tests++;
)"}) == "No");
    if((match_parens({"((()(((()))()()()()(","(()))"}) == "No");
    assert (match_parens({"())()()))))){ tests_passed++; } total_tests++;
",")((((()))))(((((()())))("}) == "No");
    if((match_parens({"((()((",""}) == "No");
    assert (match_parens({"))))))){ tests_passed++; } total_tests++;
)))))(((()(())","())()())))))("}) == "No");
    if((match_parens({"()(((()))(","((((()())()(((((("}) == "No");
    assert (match_parens({"))()(((","))()((("}) == "No");
    assert (match_parens({"((()(((()))()()()()())()()(","(()))"}) == "No");
    assert (match_parens({"()(((()))(","(((((()())(()(((((("}) == "No");
    assert (match_parens({"(()(","((((()))))(()))(()())))())))))))()(()))())))((())"}) == "No");
    assert (match_parens({"())()()))))","((((()))))(((((()()()()(()))))))))))))))((())"}) == "No");
    assert (match_parens({"))(()))))))){ tests_passed++; } total_tests++;
","((((()(((((((()))))))((((((())))"}) == "No");
    if((match_parens({"()(((((()))))((((())))))))){ tests_passed++; } total_tests++;
))))))((())((",")()(("}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
))))(((","))))))((("}) == "No");
    if((match_parens({"())()())){ tests_passed++; } total_tests++;
)))",")))(()())))("}) == "No");
    if((match_parens({"()()))){ tests_passed++; } total_tests++;
","(((((()))))(()))))((()))()))("}) == "No");
    if((match_parens({"((((()))))(()))(()()))){ tests_passed++; } total_tests++;
)())))))))))(()))))))()(()))())))((())()))()())))))(","()((("}) == "No");
    if((match_parens({")()(","(((((())))))))){ tests_passed++; } total_tests++;
)))(())())))"}) == "No");
    if((match_parens({"((((()((((((())))))))","))))"})){ tests_passed++; } total_tests++;
== "No");
    if((match_parens({"((((((((()))))(()))((()())))()))))){ tests_passed++; } total_tests++;
))))))((())()((((((()))))))","((((((((()))))(()))(()())))()))))))))))((())()((((((())(())))))))"}) == "No");
    if((match_parens({"())())){ tests_passed++; } total_tests++;
()))))","())()()))))"}) == "No");
    if((match_parens({"((((((()()))(((())))","((((((()))()"}) == "No");
    assert (match_parens({"()(((",")(()((()"}) == "No");
    assert (match_parens({"((((()))))(())","(()((())()))(())"}) == "Yes");
    assert (match_parens({"((","()(()))()"}) == "No");
    assert (match_parens({"()","(((()))))(()()))())"}) == "No");
    assert (match_parens({"((()(",")))))"}) == "No");
    assert (match_parens({"((((((((()))))(()))(()())))()))))))))))((())()((((((((()()))(((())))((((()))))))","(((((()))))))))))(())()))){ tests_passed++; } total_tests++;
)"}) == "No");
    if((match_parens({"())()())){ tests_passed++; } total_tests++;
)))",")))))"}) == "No");
    if((match_parens({"())()())){ tests_passed++; } total_tests++;
))))(()(((","()((("}) == "No");
    if((match_parens({"(((())))","(()((())()))(())"}) == "Yes")){ tests_passed++; } total_tests++;

    if((match_parens({"((()(((()))()()()()(","(()(((((()())(()(((((())"}) == "No");
    assert (match_parens({")()(","((((()))))(()))"}) == "No");
    assert (match_parens({"((((((","()))(()()))))(((((((()(()())"}) == "No");
    assert (match_parens({"()))()()(",")))(()()))("}) == "No");
    assert (match_parens({"(()((","(()(((((()((((((()))))))"}) == "No");
    assert (match_parens({")()",")))))((("}) == "No");
    assert (match_parens({"((((()))))(((((())))))))))))))((())","((()((()))()))(((((()))))())((((()()("}) == "No");
    assert (match_parens({"((((((((()))))(()))(()())))()))))))))))((())()((((((()))))))","(((()()))"}) == "No");
    assert (match_parens({"((()()()()(","(()))"}) == "No");
    assert (match_parens({")))(()()))))))((()((()))()()()()()(","()(()))()"}) == "No");
    assert (match_parens({"()(((","(()("}) == "No");
    assert (match_parens({")))))","()((()))(()))(((())))()))((()(()()(("}) == "No");
    assert (match_parens({"))((((((((()))))(()))((()())))()))))))))))((())()((((((())))))))))","))){ tests_passed++; } total_tests++;
((((((((()))))(()))((()())))()))))))))))((())()((((((())))))))))"}) == "No");
    if((match_parens({"((((()))))))){ tests_passed++; } total_tests++;
))((()((()))()()()()()))","((((()))))(()))(()())))())))))))()(()))())))((())"}) == "No");
    if((match_parens({"((","(()("}) == "No");
    assert (match_parens({"())()))()())))){ tests_passed++; } total_tests++;
))()()())))))(","))))"}) == "No");
    if((match_parens({"((((((((((()))))(((((())))))))))))))){ tests_passed++; } total_tests++;
((())(((((()))))(())","((()(("}) == "No");
    if((match_parens({"((((()()))((((((","((((((((()))))(()))(()())))()))))))))))((())()((((((())(())))))))"})){ tests_passed++; } total_tests++;
== "No");
    if((match_parens({"()(((",")(()(((()"}) == "No");
    assert (match_parens({"((((((())))","))))))(())(()())))("}) == "No");
    assert (match_parens({"(()))))(","))){ tests_passed++; } total_tests++;
)((((())))))))))(()))"}) == "No");
    if((match_parens({"))){ tests_passed++; } total_tests++;
(()))))))","((((()(((((((())))()))((((((())))(((()))))(()()))())"}) == "No");
    if((match_parens({")(((((",")()(((("}) == "No");
    assert (match_parens({")()()))())))))()((()((((())(",")()((("}) == "No");
    assert (match_parens({")((((()))))(((((()())))))(",")(((()()"}) == "No");
    assert (match_parens({"()((((((((()))())))))))))))","())()()))))"})){ tests_passed++; } total_tests++;
== "No");
    if((match_parens({"((()(","(()()()()("}) == "No");
    assert (match_parens({")(()()","((("}) == "No");
    assert (match_parens({")))))((((",")))))(((("}) == "No");
    assert (match_parens({"()((())))(","()((()))("}) == "No");
    assert (match_parens({"()",""}) == "Yes");
    assert (match_parens({"(","))"}) == "No");
    assert (match_parens({"))",")"}) == "No");
    assert (match_parens({"()(",")("}) == "No");
    assert (match_parens({"()","((((((())))"}) == "No");
    assert (match_parens({")()()(","((()))"}) == "No");
    assert (match_parens({"()(()))()","()(()))()"}) == "No");
    assert (match_parens({")(())()()(()()",")(()()"}) == "No");
    assert (match_parens({")))))(((","(()("}) == "No");
    assert (match_parens({"(((())))","())"}) == "No");
    assert (match_parens({"()((())))","()))"}) == "No");
    assert (match_parens({"()(()))()","))){ tests_passed++; } total_tests++;
)))((("}) == "No");
    if((match_parens({"(()(","(()("}) == "No");
    assert (match_parens({"()((())))","(()))"}) == "No");
    assert (match_parens({"((","(()))"}) == "No");
    assert (match_parens({"((((((((","((((())))))))"}) == "No");
    assert (match_parens({"(()(","))))))((()))"}) == "No");
    assert (match_parens({"(())())()()(()(()((()))))(","(())())()()(()()("}) == "No");
    assert (match_parens({"))()))(((","(()("}) == "No");
    assert (match_parens({"(()))","(("}) == "No");
    assert (match_parens({")()()(","(()("}) == "No");
    assert (match_parens({"((((((((","(((())))"}) == "No");
    assert (match_parens({"((()))","(()))"}) == "No");
    assert (match_parens({"(((","(()))"}) == "No");
    assert (match_parens({"()(()))()(((((","()(()))()"}) == "No");
    assert (match_parens({"(())())()()(()()(","()((())))"}) == "No");
    assert (match_parens({"(((()(((((((","((((())))))))"}) == "No");
    assert (match_parens({"()))","(((())))"}) == "No");
    assert (match_parens({"(()))","(()("}) == "No");
    assert (match_parens({"(())())()()()(()))()(()()(","()((())))"}) == "No");
    assert (match_parens({"))()))(((","(("}) == "No");
    assert (match_parens({")()()(","(((())))"}) == "No");
    assert (match_parens({"((()(","))()))()()())"}) == "No");
    assert (match_parens({"(()(","))))))(()))(()))"}) == "No");
    assert (match_parens({"(",")(()()("}) == "No");
    assert (match_parens({"()))(((","(((())))"}) == "No");
    assert (match_parens({"((())))))(","))()))()()())"}) == "No");
    assert (match_parens({"(","()(()))("}) == "No");
    assert (match_parens({"((())))))(","()(()))()"}) == "No");
    assert (match_parens({"()(()))(","(()("}) == "No");
    assert (match_parens({")(()()","(()()()((((((("}) == "No");
    assert (match_parens({"(((())))","()())(()()((()))("}) == "No");
    assert (match_parens({"(((())))","(()("}) == "No");
    assert (match_parens({")(()()(","(()))"}) == "No");
    assert (match_parens({"(((()))","()(())("}) == "No");
    assert (match_parens({"()))))(((","(()("}) == "No");
    assert (match_parens({"()(()))(()","()(()))()"}) == "No");
    assert (match_parens({")))))(((","(()))"}) == "No");
    assert (match_parens({")()()(","(((()()))"}) == "No");
    assert (match_parens({")()()((","(()("}) == "No");
    assert (match_parens({"((())))))(","(((())))"}) == "No");
    assert (match_parens({"(()))",")(()()("}) == "No");
    assert (match_parens({"((((((((","))))"}) == "No");
    assert (match_parens({"(((()((((((()(()))()","()(()))()"}) == "No");
    assert (match_parens({"()(()))()(((((","()(())))))))()"}) == "No");
    assert (match_parens({"((((((((","((()))"}) == "No");
    assert (match_parens({"(((()()()((((((((((((","((((())))))))"}) == "No");
    assert (match_parens({"((((((((","((((()))"}) == "No");
    assert (match_parens({"()(()))(","((()("}) == "No");
    assert (match_parens({"(","(()))"}) == "Yes");
    assert (match_parens({"((())))))(","()(())"}) == "No");
    assert (match_parens({"(()()()(((((((","((((())))))))"}) == "No");
    assert (match_parens({"((())))))(","()(()))()((((("}) == "No");
    assert (match_parens({"(((((((","((((())))))())"}) == "No");
    assert (match_parens({"(()))","(()))"}) == "No");
    assert (match_parens({"(()))","((((((())))"}) == "No");
    assert (match_parens({"((()(","))()))()()()))()))((()"}) == "No");
    assert (match_parens({"))()))(((","((("}) == "No");
    assert (match_parens({")(()()","((()()()((((((("}) == "No");
    assert (match_parens({"()))(((","((((())))))))"}) == "No");
    assert (match_parens({"(()()()(((((((","))()))()()()))()))(((((()()))()"}) == "No");
    assert (match_parens({")(()()","))()))()()()()(()())"}) == "No");
    assert (match_parens({"(((()()()((((((((((((","((()("}) == "No");
    assert (match_parens({"(((()()))","()(()))()"}) == "Yes");
    assert (match_parens({"(((","(((((())))))())"}) == "No");
    assert (match_parens({"((","(()"}) == "No");
    assert (match_parens({"((()())))","()())(()()((()))("}) == "No");
    assert (match_parens({"((()(((","(()((("}) == "No");
    assert (match_parens({"(()((()()()((((((())","(()))"}) == "No");
    assert (match_parens({"((()","()(())("}) == "No");
    assert (match_parens({"((())())))","(()))"}) == "No");
    assert (match_parens({"((()))",")(()()("}) == "No");
    assert (match_parens({")(()()","))))"}) == "No");
    assert (match_parens({"())((((())))()(",")))))("}) == "No");
    assert (match_parens({"(((())))(()))()(((((","()(()))()"}) == "No");
    assert (match_parens({"((((((())))","(()("}) == "No");
    assert (match_parens({"(((()))","()())(()()((()))("}) == "No");
    assert (match_parens({"((((((())))","()"}) == "No");
    assert (match_parens({"(((()()(())()))","(((()()))"}) == "No");
    assert (match_parens({"((()(","))()))()()()))())))((()"}) == "No");
    assert (match_parens({"(","()(()()"}) == "No");
    assert (match_parens({")(()(()))(()()",")(()()"}) == "No");
    assert (match_parens({")()()",")(()()"}) == "No");
    assert (match_parens({"((()","((((()())))(())("}) == "No");
    assert (match_parens({"(((((((())))","(()("}) == "No");
    assert (match_parens({"(((()()(())()))","(()))"}) == "Yes");
    assert (match_parens({"()((())))","((((())))))))"}) == "No");
    assert (match_parens({"((()((","))()))()()()))())))((()"}) == "No");
    assert (match_parens({"()(())))))))(()","()(()))()"}) == "No");
    assert (match_parens({"((((((((","((((((("}) == "No");
    assert (match_parens({"()(((","((((())))))))"}) == "Yes");
    assert (match_parens({")(()()()))(((","(()()()((((((("}) == "No");
    assert (match_parens({"()(())(()","()(())))))))(()"}) == "No");
    assert (match_parens({")()()(","((((((((("}) == "No");
    assert (match_parens({"(((()","((((()())))(())("}) == "No");
    assert (match_parens({"()(()())))","()())(()()((()))("}) == "No");
    assert (match_parens({"(()","()(()))()"}) == "Yes");
    assert (match_parens({")()()",")((())())()()(()()(()()"}) == "No");
    assert (match_parens({"((()((","(()()()((((())))))(()))(()))"}) == "No");
    assert (match_parens({"","()(()))("}) == "No");
    assert (match_parens({"(((((((",")(()()"}) == "No");
    assert (match_parens({"(()))","(((((((())))"}) == "No");
    assert (match_parens({"(()(",")(()()()((((((("}) == "No");
    assert (match_parens({"(())())()()()(()))()(()()(","((()(()))())"}) == "No");
    assert (match_parens({"((()(","))()))()())())"}) == "No");
    assert (match_parens({"(((())))(()))()(((((","()(())))()"}) == "No");
    assert (match_parens({"((()(()))())","((()(()))())"}) == "Yes");
    assert (match_parens({"(()()))))(((","(()("}) == "No");
    assert (match_parens({")(()())(",")(()()("}) == "No");
    assert (match_parens({"(((()()(())()))","(((()()(())()))"}) == "No");
    assert (match_parens({"(())())()()(()(()((()))))(","(())((()((()()()((((((())))()()(()()("}) == "No");
    assert (match_parens({"))))))(()))(()))","))))))(()))(()))"}) == "No");
    assert (match_parens({")(()())(",")("}) == "No");
    assert (match_parens({"(((())))(()))()(((((","(((())))(()))()((((("}) == "No");
    assert (match_parens({"(((()()(())()))","))))"}) == "No");
    assert (match_parens({"))()))(((",")))))("}) == "No");
    assert (match_parens({"(((()()(())()))","))"}) == "No");
    assert (match_parens({")()(()",")()()"}) == "No");
    assert (match_parens({"((()()()(((((((","(()))"}) == "No");
    assert (match_parens({"(((()(())))))))(()()((","()(()))()"}) == "No");
    assert (match_parens({"()(()()(()","()(())))))))(()"}) == "No");
    assert (match_parens({"(((()()(())()))","((((((((())))()))"}) == "No");
    assert (match_parens({"))()))()()()))()))))((()","))()))()()()))())))((()"}) == "No");
    assert (match_parens({"()(()))()(((((","()(()))()((((("}) == "No");
    assert (match_parens({")(()()((()()()((((((((",")(()()("}) == "No");
    assert (match_parens({"((()())))","()())(()()(()()))("}) == "No");
    assert (match_parens({"()((())))","()(()())))"}) == "No");
    assert (match_parens({"((((((((())))))())((((","((((()))"}) == "No");
    assert (match_parens({")(()(()))(()()","((((())))))))"}) == "No");
    assert (match_parens({"(((()))","(((())))"}) == "No");
    assert (match_parens({")))))(((","(())"}) == "No");
    assert (match_parens({"(())())()()(()()(","()))))((("}) == "No");
    assert (match_parens({"())((((())))()(",")(()((()()()((((((())())))((())"}) == "No");
    assert (match_parens({"((((((())))","(()"}) == "No");
    assert (match_parens({"(()()()((((())))))(()))(()))",")()()("}) == "No");
    assert (match_parens({"(((((((","(((()((((((("}) == "No");
    assert (match_parens({"()(())(()","()(())(()"}) == "No");
    assert (match_parens({")(()()((()()()((((((((","((()((("}) == "No");
    assert (match_parens({")())()",")((())())()()(()()(()()"}) == "No");
    assert (match_parens({"((((((())))","((()((((()("}) == "No");
    assert (match_parens({"((((((())))","))()))()()()))()))(((((()()))()"}) == "No");
    assert (match_parens({"()(())))()","(()))"}) == "No");
    assert (match_parens({"()())(()()((()))(","()())(()()((()))("}) == "No");
    assert (match_parens({"(())()","(()))"}) == "No");
    assert (match_parens({")(()()","()(())())()"}) == "No");
    assert (match_parens({"()(())))()","(((()()(())()))"}) == "No");
    assert (match_parens({"((","(())))"}) == "Yes");
    assert (match_parens({")((())())()()(()(()((()))))(()())(",")("}) == "No");
    assert (match_parens({"((()((","((()(("}) == "No");
    assert (match_parens({")(())()","()(())())()"}) == "No");
    assert (match_parens({"(((()(())))))))(()()((","((((())))))())"}) == "No");
    assert (match_parens({"(()()))))(((","()(()))()"}) == "No");
    assert (match_parens({")((())())()()(()()(()()","((((())))))))"}) == "No");
    assert (match_parens({"((((((((","(((("}) == "No");
    assert (match_parens({")()((","(()("}) == "No");
    assert (match_parens({"(())())()()()(()))()(()()(","("}) == "No");
    assert (match_parens({"())((((())))()(","())((((())))()("}) == "No");
    assert (match_parens({"(()()))))(((","(()()))))((("}) == "No");
    assert (match_parens({"()(","((()"}) == "No");
    assert (match_parens({"(((())))","(())("}) == "No");
    assert (match_parens({"()))(((","()(())("}) == "No");
    assert (match_parens({"(())())()()(()(()((()))))(","(())()(()((()()()((((((())))()()(()()("}) == "No");
    assert (match_parens({")((())())()()(()()(()()","()(())("}) == "No");
    assert (match_parens({"))()))()()()))())))((()","))()))()()()))())))((()"}) == "No");
    assert (match_parens({"(()(","()(("}) == "No");
    assert (match_parens({"(()()))))(((","()(()))("}) == "No");
    assert (match_parens({"(((()()))","(())))"}) == "No");
    assert (match_parens({"((((((((","("}) == "No");
    assert (match_parens({"()))(((","()))((("}) == "No");
    assert (match_parens({")))))(","((((())))))))"}) == "No");
    assert (match_parens({"((()())))","((()())))"}) == "No");
    assert (match_parens({"()(())(","())((((())))()("}) == "No");
    assert (match_parens({")(()())(","((((())))))))"}) == "No");
    assert (match_parens({")()()",")(()(())))))))()()"}) == "No");
    assert (match_parens({"((())())))","()(()())))"}) == "No");
    assert (match_parens({"(((())))(()))()(((((","))()))()()()))())))((()"}) == "No");
    assert (match_parens({"(((((","))))"}) == "No");
    assert (match_parens({"(())())()()(()(()((()))))(","))"}) == "No");
    assert (match_parens({")(()()(",")(()()("}) == "No");
    assert (match_parens({"()()(())))","()((())))"}) == "No");
    assert (match_parens({"(())())(((((((((","()((())))"}) == "No");
    assert (match_parens({"(()())))))(((","()(()))("}) == "No");
    assert (match_parens({"(())())()()()(()))()(()()(","(()))())"}) == "No");
    assert (match_parens({"(()(",")))((()))"}) == "No");
    assert (match_parens({")(()(()))(()()","((((((((())))))())(((("}) == "No");
    assert (match_parens({")()()",")(()(())))))))()())"}) == "No");
    assert (match_parens({"(((()(","))()))()()()))()))((()"}) == "No");
    assert (match_parens({"(())))","((((())))))())"}) == "No");
    assert (match_parens({"()(())(()","()(()))("}) == "No");
    assert (match_parens({"(())(())())()()(()()(","()(()))()"}) == "No");
    assert (match_parens({"(((((","))()))()()()))()))((()"}) == "No");
    assert (match_parens({"(()()()((((())))))(()))(()))","(((((((())))"}) == "No");
    assert (match_parens({")(","(()("}) == "No");
    assert (match_parens({")))()))()()()))()))))((()","))()))()()()))())))((()"}) == "No");
    assert (match_parens({"()))))(((","(())))"}) == "No");
    assert (match_parens({"))()))()()()))()))((()","()((())))"}) == "No");
    assert (match_parens({"((())))))(","(()()()((((())))))(()))(()))"}) == "No");
    assert (match_parens({")(())()()(()()","((()("}) == "No");
    assert (match_parens({"()()())))))))(()","()(())))))))(()"}) == "No");
    assert (match_parens({"(((((","(((("}) == "No");
    assert (match_parens({"(()(","))()))()()()()(()())"}) == "No");
    assert (match_parens({"))()))(((",")))))((("}) == "No");
    assert (match_parens({"((((","))()))()())())"}) == "No");
    assert (match_parens({"(()((()()()((((((())","(())))"}) == "No");
    assert (match_parens({")(()(())((((())))()()(","(()))"}) == "No");
    assert (match_parens({"(((()()(())()))","(()))()))()()()))()))))((()(()()(())()))"}) == "No");
    assert (match_parens({"()())(()()((()))(","(((())))"}) == "No");
    assert (match_parens({"(((()()))","((((())))))))"}) == "No");
    assert (match_parens({")(()()(",")(()()(())()("}) == "No");
    assert (match_parens({"))())()(())(((",")))))("}) == "No");
    assert (match_parens({"(((((","()(()))()"}) == "No");
    assert (match_parens({")(()(()))(()()","()))((("}) == "No");
    assert (match_parens({"((((((((","()((())))"}) == "No");
    assert (match_parens({"(((())))","()))((("}) == "No");
    assert (match_parens({"(()(",")))((()))((())))))("}) == "No");
    assert (match_parens({")()()(","(())(())()("}) == "No");
    assert (match_parens({"(())())()()()(()))()(())()(","("}) == "No");
    assert (match_parens({"((","((((((((("}) == "No");
    assert (match_parens({"(()(((","()(()))()"}) == "No");
    assert (match_parens({")(())()",")))))((("}) == "No");
    assert (match_parens({"()()(","())((((())))()("}) == "No");
    assert (match_parens({"(((()())","())((((())))()("}) == "No");
    assert (match_parens({"()())(()(()((()))(","()(()())))"}) == "No");
    assert (match_parens({"(()()()(((((((","))))))(()))(()))"}) == "Yes");
    assert (match_parens({"((((((())))","()()(())))((()((((()("}) == "No");
    assert (match_parens({")()()(","(()))()("}) == "No");
    assert (match_parens({"))()))()()()))())))((()","())()))()()()))())))((()"}) == "No");
    assert (match_parens({"(((()))","()()(()()()(((((((())("}) == "No");
    assert (match_parens({")(()(()))(()()","()))((((())()"}) == "No");
    assert (match_parens({"(()(())(()(((((())))","(()("}) == "No");
    assert (match_parens({"((((()())))(())(","()(()))()"}) == "No");
    assert (match_parens({"((()(((","((((()())))(())("}) == "No");
    assert (match_parens({"()((())))","))))))(()))(()))"}) == "No");
    assert (match_parens({"(()()()((((())))))(()))(()))","((((((())))"}) == "No");
    assert (match_parens({"((())))))","()(()))()((((("}) == "No");
    assert (match_parens({"((()())))","))()))()()()))())))((()"}) == "No");
    assert (match_parens({")()()",")((())())()()(()()(()(()"}) == "No");
    assert (match_parens({"(((()(((((((","(((()((((((("}) == "No");
    assert (match_parens({"))(()()((()()()((((((((","()(()))()"}) == "No");
    assert (match_parens({"(()))","()(()()("}) == "No");
    assert (match_parens({"(()))",")()(()(())))))))()())()()("}) == "No");
    assert (match_parens({"))()))()()())","))()))()()())"}) == "No");
    assert (match_parens({")(()())(",")(()()(((()((((((("}) == "No");
    assert (match_parens({"(()()()((((())))))(()))(()))","(()()()((((())))))(()))(()))"}) == "No");
    assert (match_parens({"((","(((("}) == "No");
    assert (match_parens({"((((","(((()()))"}) == "No");
    assert (match_parens({")(()(())))))))()()","()))((("}) == "No");
    assert (match_parens({"(()))","(())("}) == "Yes");
    assert (match_parens({"()(()))()(((((","(())))"}) == "No");

    auto __end = clock::now();
    time_taken_ms = std::chrono::duration_cast<std::chrono::milliseconds>(__end - __start).count();
    std::cout << "[TEST_SUMMARY] time_ms=" << time_taken_ms << " tests_passed=" << tests_passed << " total_tests=" << total_tests << std::endl;
})){ tests_passed++; } total_tests++;

