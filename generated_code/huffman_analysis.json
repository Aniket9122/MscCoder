{'diagnostics': [{'code': 'unused-includes', 'codeDescription': {'href': 'https://clangd.llvm.org/guides/include-cleaner'}, 'message': 'Included header map is not used directly (fix available)', 'range': {'end': {'character': 14, 'line': 3}, 'start': {'character': 0, 'line': 3}}, 'severity': 2, 'source': 'clangd', 'tags': [1]}], 'function_signatures': {'newNode': 'function newNode\n\n→ Node *\nParameters:\n- int symbol\n- int frequency\nFunction to create a new node with the given symbol and frequency\n\nNode *newNode(int symbol, int frequency)', 'printTree': 'function printTree\n\n→ void\nParameters:\n- Node * root\nFunction to print the Huffman tree in a pre-order traversal format\n\nvoid printTree(Node *root)', 'createHuffmanTree': 'function createHuffmanTree\n\n→ Node *\nParameters:\n- vector<int> & symbols\n- vector<int> & frequencies\nFunction to create a Huffman tree from the input data\n\nNode *createHuffmanTree(vector<int> &symbols, vector<int> &frequencies)', 'encodeSymbol': 'function encodeSymbol\n\n→ void\nParameters:\n- Node * root\n- int symbol\nFunction to encode a symbol using the Huffman code\n\nvoid encodeSymbol(Node *root, int symbol)', 'decodeCode': 'function decodeCode\n\n→ void\nParameters:\n- Node * root\n- int code\nFunction to decode a Huffman code using the Huffman tree\n\nvoid decodeCode(Node *root, int code)', 'main': 'function main\n\n→ int\n\nint main()'}}